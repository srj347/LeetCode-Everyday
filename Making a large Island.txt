/* 

Author : Suraj Verma
Problem : Making a large Island
link : https://leetcode.com/problems/making-a-large-island

*/

TC - O(no. of zeroes * n^2)
class Solution {
    public static int largestIsland(int[][] grid) {
        int n = grid.length;

        int max = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                int[][] visited = new int[n][n];
                if(grid[i][j] == 0){
                    grid[i][j] = 1;
                    max = Math.max(max, current(grid,i,j,visited));
                    grid[i][j] = 0;
                }
            }
        }
        if(max == 0){
            return n*n;
        }
        else{
            return max;
        }
    }

    static int current(int[][] grid, int i, int j,int[][] visited){
        if(i<0 || i>=grid.length || j<0 || j>=grid.length){
            return 0;
        }
        if(grid[i][j] <= 0){
            return 0;
        }
        visited[i][j] = 1;
        int top = 0,right = 0,bottom = 0,left = 0;
        if(i>0 && visited[i-1][j] != 1){
            top = current(grid,i-1,j,visited);
        }
        if(j+1<grid.length && visited[i][j+1] != 1){
            right = current(grid,i,j+1,visited);
        }
        if(i+1<grid.length && visited[i+1][j] != 1){
            bottom = current(grid,i+1,j,visited);
        }
        if(j>0 && visited[i][j-1] != 1){
            left = current(grid,i,j-1,visited);
        }
        return top+right+bottom+left+1;
    }
}

-------------------

TC : O(n^2) , using coloring technique
class Solution {
    public int largestIsland(int[][] grid) {
        int n = grid.length;
        Map<Integer,Integer> freq = new HashMap<>();
        freq.put(0,0);
        
        int id = 2;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    freq.put(id,coloring(grid,i,j,id));
                    id++;
                }
            }
        }
        
        int max = freq.getOrDefault(2,0);
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 0){
                    Set<Integer> set = new HashSet<>();
                    set.add(i>0 ? grid[i-1][j]:0);
                    set.add(j<n-1 ? grid[i][j+1]:0);
                    set.add(i<n-1 ? grid[i+1][j]:0);
                    set.add(j>0 ? grid[i][j-1]:0);
                    
                    int total = 1;
                    for(int e: set){
                        total += freq.get(e);
                    }
                    max = Math.max(max,total);
                }
            }
        }
        return max;
    }

    int coloring(int[][] grid, int i, int j,int id){
        if(i<0 || i>=grid.length || j<0 || j>=grid.length){
            return 0;
        }
        if(grid[i][j] != 1){
            return 0;
        }
        
        grid[i][j] = id;
        return coloring(grid,i-1,j,id) + coloring(grid,i,j+1,id) + coloring(grid,i+1,j,id) + coloring(grid,i,j-1,id) + 1;
        
    }
}
