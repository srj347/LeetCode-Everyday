/*

Author : Suraj Verma


Leetcode July Challenge Day 1
Problem Statement : n-bit gray code

An n-bit gray code sequence is a sequence of 2n integers where:

-Every integer is in the inclusive range [0, 2n - 1],
-The first integer is 0,
-An integer appears no more than once in the sequence,
-The binary representation of every pair of adjacent integers differs by exactly one bit, and
-The binary representation of the first and last integers differs by exactly one bit.
-Given an integer n, return any valid n-bit gray code sequence.

Example
Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit

Problem link - https://leetcode.com/explore/challenge/card/july-leetcoding-challenge-2021/608/week-1-july-1st-july-7th/3799/

Approach : 
here the brute force will not work, since it will take O(2^2n),
therefore here we can come up with an approach which is quite similar to K-Map.
since we have to find 2^n elements with n bit were adajacent elements must have exactly 
one bit different, and we can see that this gives us a hint to think of K-Map, where 
we need to iterate in a cyclic manner in order to get the result list.

*/

// My Leetcode submission
class Solution {
    public List<Integer> grayCode(int n) {
        ArrayList<Integer> res = new ArrayList<>();
        res.add(0);
        res.add(1);
        
        int cur = 1;
        for(int i=2;i<=n;i++){
            cur *= 2;
            for(int j=res.size()-1; j>=0 ;j--){
                res.add(cur + res.get(j));  
            }
         }
        return res;
    }
}